@echo off
setlocal enabledelayedexpansion

echo üöÄ Testing minikube nginx + Istio setup
echo ========================================
echo.

REM Get minikube IP
echo üìç Getting Minikube IP...
for /f "tokens=*" %%i in ('minikube ip 2^>nul') do set MINIKUBE_IP=%%i
if "%MINIKUBE_IP%"=="" (
    echo ‚ùå Error: Could not get minikube IP. Is minikube running?
    echo Run: minikube start
    pause
    exit /b 1
)
echo üìç Minikube IP: %MINIKUBE_IP%

REM Get nginx ingress NodePort
echo üîå Getting nginx ingress NodePort...
for /f "tokens=*" %%i in ('kubectl get svc -n ingress-nginx ingress-nginx-controller -o jsonpath^="{.spec.ports[0].nodePort}" 2^>nul') do set NODEPORT=%%i
if "%NODEPORT%"=="" (
    echo ‚ùå Error: Could not get NodePort. Is nginx-ingress installed?
    echo Run: minikube addons enable ingress
    pause
    exit /b 1
)
echo üîå NodePort: %NODEPORT%

REM Build base URL
set BASE_URL=http://%MINIKUBE_IP%:%NODEPORT%
echo üåê Base URL: %BASE_URL%

echo.
echo üß™ Testing Blue/Green Deployment
echo ================================
echo.

echo 1Ô∏è‚É£ Testing BLUE version (default traffic):
echo Command: curl -H "Host: spms-bg-v2" "%BASE_URL%"
curl -s -H "Host: spms-bg-v2" "%BASE_URL%" 2>nul
if !errorlevel! neq 0 (
    echo ‚ùå Blue test failed - check if services are running
) else (
    echo ‚úÖ Blue test completed
)
echo.

echo 2Ô∏è‚É£ Testing GREEN version (with version header):
echo Command: curl -H "Host: spms-bg-v1" -H "version: green" "%BASE_URL%"
curl -s -H "Host: spms-bg-v1" -H "version: green" "%BASE_URL%" 2>nul
if !errorlevel! neq 0 (
    echo ‚ùå Green test failed - check Virtual Service configuration
) else (
    echo ‚úÖ Green test completed
)
echo.

echo üîç Debugging Information
echo =======================
echo.

echo üìã Ingress Status:
kubectl get ingress -n spms-bg 2>nul
if !errorlevel! neq 0 echo ‚ùå No ingress found in spms-bg namespace
echo.

echo üõ†Ô∏è Istio Gateway Status:
kubectl get gateway -n spms-bg 2>nul
if !errorlevel! neq 0 echo ‚ùå No gateway found in spms-bg namespace
echo.

echo üõ£Ô∏è Virtual Service Status:
kubectl get virtualservice -n spms-bg 2>nul
if !errorlevel! neq 0 echo ‚ùå No virtualservice found in spms-bg namespace
echo.

echo üéØ DestinationRule Status:
kubectl get destinationrule -n spms-bg 2>nul
if !errorlevel! neq 0 echo ‚ùå No destinationrule found in spms-bg namespace
echo.

echo üîß Services in spms-bg:
kubectl get svc -n spms-bg 2>nul
if !errorlevel! neq 0 echo ‚ùå No services found in spms-bg namespace
echo.

echo üì¶ Pods in spms-bg:
kubectl get pods -n spms-bg 2>nul
if !errorlevel! neq 0 echo ‚ùå No pods found in spms-bg namespace
echo.

echo üîß Nginx Ingress Controller Status:
kubectl get pods -n ingress-nginx 2>nul
if !errorlevel! neq 0 echo ‚ùå Nginx ingress controller not found
echo.

echo üåê Istio System Status:
kubectl get pods -n istio-system 2>nul
if !errorlevel! neq 0 echo ‚ùå Istio system not found
echo.

echo üìù Manual Testing Commands:
echo ============================
echo Default (Blue):  curl -H "Host: spms-bg-v2" %BASE_URL%
echo Green:           curl -H "Host: spms-bg-v1" -H "version: green" %BASE_URL%
echo Port Forward:    kubectl port-forward -n ingress-nginx svc/ingress-nginx-controller 8080:80
echo Tunnel:          minikube tunnel  ^(run in separate terminal^)
echo.

